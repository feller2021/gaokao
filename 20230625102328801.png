        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>403错误</title>
            <meta name="description" content="403错误">
            <meta name="keywords" content="403错误">
            <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
            <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <style>
        h2,ul,li{margin:0;padding:0;list-style-type:none;}
        .f_sty403{padding:80px 0;}
        .f_sty403 .img{text-align:center;}
        .f_sty403 .img img, .f_sty403 .img svg{width:100%;max-width:470px;}
        .f_sty403 h2{font-size:24px;margin:20px 0 10px 0; text-align:center;font-weight:500;color:#444;}
        .f_sty403 ul{width:90%;max-width:500px;margin:0 auto;}
        .f_sty403 ul li{padding:4px 0;font-size:14px;overflow:auto;zoom:1;}
        .f_sty403 ul li span{float:left;}
        .f_sty403 ul li .t{color:#ccc;width:26%; text-align:right;}
        .f_sty403 ul li .g{color:#999;width:71%;margin-left:3%;word-wrap:break-word;word-break:normal; }
        </style>
        </head>
        <body onload="init();">
        <div class="f_sty403">
            <div class="m" id="animation_container" style="width:470px;height:240px;margin:0 auto;">
                <canvas id="canvas" width="470" height="240" style="position: absolute; display: block;"></canvas>
                <div id="dom_overlay_container" style="pointer-events:none; overflow:hidden; width:470px; height:240px; position: absolute; left: 0px; top: 0px; display: block;">
                </div>
            </div>
            <h2>访问错误了哦，请重试！</h2>
            <ul>
                <li><span class="t">Request-ID:</span>
                    <span class="g">aa7531fa789ec82368803a27deacc86b</span>
                </li>
                <li><span class="t">IP:</span>
                    <span class="g">172.177.233.55</span>
                </li>
                <li><span class="t">User-Agent:</span>
                    <span class="g">python-requests/2.31.0</span>
                </li>
                <li><span class="t">Referer:</span>
                    <span class="g">-</span>
                </li>
            </ul>
        </div>
        <script type="text/javascript" src="/_ct_sbu/createjs-2015.11.26.min.js"></script>
        <script type="text/javascript" src="/_ct_sbu/403_v2.js"></script>
        <script type="text/javascript">
        var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
        function init() {
            canvas = document.getElementById("canvas");
            anim_container = document.getElementById("animation_container");
            dom_overlay_container = document.getElementById("dom_overlay_container");
            var comp=AdobeAn.getComposition("AB6586161BF71B4BB6922746D39A7144");
            var lib=comp.getLibrary();
            handleComplete({},comp);
        }
        function handleComplete(evt,comp) {
            var lib=comp.getLibrary();
            var ss=comp.getSpriteSheet();
            exportRoot = new lib._403_v2_HTML5Canvas();
            stage = new lib.Stage(canvas);
            fnStartAnimation = function() {
                stage.addChild(exportRoot);
                createjs.Ticker.setFPS(lib.properties.fps);
                createjs.Ticker.addEventListener("tick", stage)
                stage.addEventListener("tick", handleTick)
                function getProjectionMatrix(container, totalDepth) {
                    var focalLength = 528.25;
                    var projectionCenter = { x : lib.properties.width/2, y : lib.properties.height/2 };
                    var scale = (totalDepth + focalLength)/focalLength;
                    var scaleMat = new createjs.Matrix2D;
                    scaleMat.a = 1/scale;
                    scaleMat.d = 1/scale;
                    var projMat = new createjs.Matrix2D;
                    projMat.tx = -projectionCenter.x;
                    projMat.ty = -projectionCenter.y;
                    projMat = projMat.prependMatrix(scaleMat);
                    projMat.tx += projectionCenter.x;
                    projMat.ty += projectionCenter.y;
                    return projMat;
                }
                function handleTick(event) {
                    var cameraInstance = exportRoot.___camera___instance;
                    if(cameraInstance !== undefined && cameraInstance.pinToObject !== undefined)
                    {
                        cameraInstance.x = cameraInstance.pinToObject.x + cameraInstance.pinToObject.pinOffsetX;
                        cameraInstance.y = cameraInstance.pinToObject.y + cameraInstance.pinToObject.pinOffsetY;
                        if(cameraInstance.pinToObject.parent !== undefined && cameraInstance.pinToObject.parent.depth !== undefined)
                        cameraInstance.depth = cameraInstance.pinToObject.parent.depth + cameraInstance.pinToObject.pinOffsetZ;
                    }
                    applyLayerZDepth(exportRoot);
                }
                function applyLayerZDepth(parent)
                {
                    var cameraInstance = parent.___camera___instance;
                    var focalLength = 528.25;
                    var projectionCenter = { 'x' : 0, 'y' : 0};
                    if(parent === exportRoot)
                    {
                        var stageCenter = { 'x' : lib.properties.width/2, 'y' : lib.properties.height/2 };
                        projectionCenter.x = stageCenter.x;
                        projectionCenter.y = stageCenter.y;
                    }
                    for(child in parent.children)
                    {
                        var layerObj = parent.children[child];
                        if(layerObj == cameraInstance)
                            continue;
                        applyLayerZDepth(layerObj, cameraInstance);
                        if(layerObj.layerDepth === undefined)
                            continue;
                        if(layerObj.currentFrame != layerObj.parent.currentFrame)
                        {
                            layerObj.gotoAndPlay(layerObj.parent.currentFrame);
                        }
                        var matToApply = new createjs.Matrix2D;
                        var cameraMat = new createjs.Matrix2D;
                        var totalDepth = layerObj.layerDepth ? layerObj.layerDepth : 0;
                        var cameraDepth = 0;
                        if(cameraInstance && !layerObj.isAttachedToCamera)
                        {
                            var mat = cameraInstance.getMatrix();
                            mat.tx -= projectionCenter.x;
                            mat.ty -= projectionCenter.y;
                            cameraMat = mat.invert();
                            cameraMat.prependTransform(projectionCenter.x, projectionCenter.y, 1, 1, 0, 0, 0, 0, 0);
                            cameraMat.appendTransform(-projectionCenter.x, -projectionCenter.y, 1, 1, 0, 0, 0, 0, 0);
                            if(cameraInstance.depth)
                                cameraDepth = cameraInstance.depth;
                        }
                        if(layerObj.depth)
                        {
                            totalDepth = layerObj.depth;
                        }
                        totalDepth -= cameraDepth;
                        if(totalDepth < -focalLength)
                        {
                            matToApply.a = 0;
                            matToApply.d = 0;
                        }
                        else
                        {
                            if(layerObj.layerDepth)
                            {
                                var sizeLockedMat = getProjectionMatrix(parent, layerObj.layerDepth);
                                if(sizeLockedMat)
                                {
                                    sizeLockedMat.invert();
                                    matToApply.prependMatrix(sizeLockedMat);
                                }
                            }
                            matToApply.prependMatrix(cameraMat);
                            var projMat = getProjectionMatrix(parent, totalDepth);
                            if(projMat)
                            {
                                matToApply.prependMatrix(projMat);
                            }
                        }
                        layerObj.transformMatrix = matToApply;
                    }
                }
            }       
            function makeResponsive(isResp, respDim, isScale, scaleType) {
                var lastW, lastH, lastS=1;
                window.addEventListener('resize', resizeCanvas);    
                resizeCanvas();
                function resizeCanvas() {
                    var w = lib.properties.width, h = lib.properties.height;    
                    var iw = window.innerWidth, ih=window.innerHeight;
                    var pRatio = window.devicePixelRatio || 1, xRatio=iw/w, yRatio=ih/h, sRatio=1;      
                    if(isResp) {        
                        if((respDim=='width'&&lastW==iw) || (respDim=='height'&&lastH==ih)) {               
                            sRatio = lastS;   
                        }
                        else if(!isScale) {      
                            if(iw<w || ih<h)              
                                sRatio = Math.min(xRatio, yRatio);       
                        }
                        else if(scaleType==1) {           
                            sRatio = Math.min(xRatio, yRatio);      
                        }
                        else if(scaleType==2) {       
                            sRatio = Math.max(xRatio, yRatio);  
                        }
                    }
                    canvas.width = w*pRatio*sRatio;    
                    canvas.height = h*pRatio*sRatio;
                    canvas.style.width = dom_overlay_container.style.width = anim_container.style.width =  w*sRatio+'px';           
                    canvas.style.height = anim_container.style.height = dom_overlay_container.style.height = h*sRatio+'px';
                    stage.scaleX = pRatio*sRatio;       
                    stage.scaleY = pRatio*sRatio;        
                    lastW = iw; lastH = ih; lastS = sRatio;      
                    stage.tickOnUpdate = false;         
                    stage.update();   
                    stage.tickOnUpdate = true;
                }
            }
            makeResponsive(false,'both',false,1);
            AdobeAn.compositionLoaded(lib.properties.id);
            fnStartAnimation();
        }
        </script>
        </body>
        </html>
